<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: other | 微个日光日]]></title>
  <link href="http://xiebaochun.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://xiebaochun.github.io/"/>
  <updated>2014-08-19T07:32:44+08:00</updated>
  <id>http://xiebaochun.github.io/</id>
  <author>
    <name><![CDATA[Nicholas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[windows Controls and WPF UserControls inside an xna game project]]></title>
    <link href="http://xiebaochun.github.io/blog/2013/09/18/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/"/>
    <updated>2013-09-18T13:56:00+08:00</updated>
    <id>http://xiebaochun.github.io/blog/2013/09/18/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project</id>
    <content type="html"><![CDATA[<p>In this article we will be working on using Windows Controls and WPF UserControls inside an XNA Game Project.</p>

<p>They tell Windows Controls cant be used inside an XNA game let alone WPF. Well, that has been proved in this article.</p>

<!--more-->

<h3 id="components">Components:</h3>

<h4 id="windows-controls-well-be-using">Windows Controls we’ll be using</h4>

<ul>
  <li>Button</li>
  <li>TextBox</li>
  <li>CheckBox</li>
  <li>ElementHost</li>
</ul>

<h4 id="tools">Tools</h4>

<p>XNA GS 3.1 veya Visual Studio 2008(SP1)
.NET Framework 3.5(SP1)</p>

<p>We are creating a new project:</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image1.gif" alt="" /></p>

<p>Now we will add reference.Project-&gt;Add Reference and then choose “System.Windows.Forms” namespace.</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image2.gif" alt="" /></p>

<p>And declare it on Game1.cs:</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image3.gif" alt="" /></p>

<p>Note: You may need to declare and add reference to “System.Drawing” namespace as well. </p>

<h4 id="textbox-control">TextBox Control:</h4>

<p>An Input control we can use on Windows Forms.We add Textbox to our XNA project:</p>

<p>In anywhere we can declare variables:</p>

<pre><code>TextBox text1 = new TextBox();
</code></pre>

<p>With that we have created a new Textbox variable.We are adding the code below to our Initialize() function. </p>

<pre><code> protected override void Initialize()
    {            
        base.Initialize();
        text1.Location = new System.Drawing.Point(40, 40);
        text1.BorderStyle = BorderStyle.None;
        text1.Multiline = true;
        text1.Size = new Size(400, 400);
        Control.FromHandle(Window.Handle).Controls.Add(text1);
    }
</code></pre>

<p>Let us explain : “Control.FromHandle(Window.Handle).Controls.Add(ornek);” </p>

<p>“Control.FromHandle” - helps us to call the handle we will add textbox.</p>

<p>“Control.FromHandle(Window.Handle)” We take the Handle of GameWindow class named Window.Game class is not a control.But because of GameWindow is a control that can be used on XNA project,we can call and add Windows Controls through it.We were able to add or remove any control while coding in Windows Forms because Windows Forms was itself a control too.Now let me tell you this: “Form class &amp; GameWindow class looks alike”.By thinking so we can make RAD(Rapid Application Development) in XNA just like we do while developing Windows Form Based Applications.</p>

<p>But if you run the project,you will not be able to enter a key inside TextBox class.</p>

<p>Because while Textbox class uses “System.Windows.Forms.Keys”,XNA accepts only “XNA.Framework.Input.Keys”.Although we cant make it with the Windows-Way,we will make it as we do on XNA Inputs.</p>

<pre><code>string var_text1;
</code></pre>

<p>we add a string valuable that will store all the texts from your input and then assign to our text1 named TextBox class</p>

<pre><code>protected override void Update(GameTime gameTime)
 {
   base.Update(gameTime);
   if (text1.Focused)
{
  KeyboardState ns = Keyboard.GetState();
  foreach (Microsoft.Xna.Framework.Input.Keys a in ns.GetPressedKeys())
{ 
  var_text1 = a.ToString();
  text1.Text += var_text1;
}
 }
 }
</code></pre>

<p>“KeyboardState ns = Keyboard.GetState();” -&gt; we get all the input from Keyboard(“ns.GetPressedKeys()”).This helps us to to write any key value to our Textbox.</p>

<p>If you wish you may not take all the keys,just use “if-else” structure and take any key you want to.</p>

<p>Let us run the project.Whats going to happen?</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image4.gif" alt="" /></p>

<p>When we press a key,it wrote as we pressed 5 times.Let me explain this:</p>

<p>In Xna, every event happens on Update function depends on Gametime value.1 sec process is repeated 5 times so that the game window refreshes as we want.Why is it 1 sec/5? Because in continuous things like “chasing a car,shooting an opponent” we must see whats happening instantly.The user must feel like he is playing a “Real-time” game.Because of that Gametime repeats 5 times in 1 sec.Even 1 sec can differ sometime.</p>

<p>Lets go back to our project.How we will solve this?</p>

<p>create an int variable and query it on Update function.</p>

<pre><code>int ct = 0; //the start value must be 0 so it cant be repeated.
</code></pre>

<p>Then update our Update function seen below:</p>

<pre><code>protected override void Update(GameTime gameTime)
 {
   base.Update(gameTime);
   if (text1.Focused)
{
  ct = ct -1;
  if(ct &lt; 0)
   {
 ct = 5;
   }

 if(ct == 0)
   {
 KeyboardState ns = Keyboard.GetState();
 foreach (Microsoft.Xna.Framework.Input.Keys a in ns.GetPressedKeys())
  { 
   var_text1 = a.ToString();
   Text1.Text += var_text1;
  }
   }
 }
  }
</code></pre>

<p>And you can enter any value without repeating:</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image5.gif" alt="" /></p>

<p>Thats it! You have created a Textbox control inside an XNA Window…</p>

<h4 id="button-control">BUTTON Control:</h4>

<p>Button control helps us to accept a process.In this section i will be talking about how to add a button control and its eventhandler.</p>

<p>We declare our Button Class first.</p>

<pre><code>Button btn = new Button();
</code></pre>

<p>To add this inside project-update Initialize function just like below:</p>

<pre><code>protected override void Initialize()
 {
   base.Initialize();
   btn.Text = "Press Me!";
   btn.Location = new System.Drawing.Point(50, 50);
   btn.FlatStyle = FlatStyle.Popup;
   Control.FromHandle(Window.Handle).Controls.Add(btn);
 }
</code></pre>

<p>Now lets write down a simple EventHandler that will show us a MessageBox.</p>

<pre><code>protected override void Initialize()
  {
base.Initialize();
btn.Text = "Press Me!";
btn.Location = new System.Drawing.Point(50, 50);
btn.FlatStyle = FlatStyle.Popup;
btn.Click += new System.EventHandler(ButtonClick);
Control.FromHandle(Window.Handle).Controls.Add(btn);
  }

private void ButtonClick(object sender, EventArgs e)
  {
MessageBox.Show("Button is Clicked!");
  }
</code></pre>

<p>By doing so we have added “Windows Control-Based” events inside XNA Game.</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image6.gif" alt="" /></p>

<h4 id="checkbox-control">CHECKBOX Control:</h4>

<p>Checkbox control helps us to select multi-options.</p>

<p>We declare it as seen below:</p>

<pre><code>CheckBox cb = new CheckBox();
</code></pre>

<p>Using it:</p>

<pre><code>protected override void Initialize()
 {
   base.Initialize();
   cb.CheckState = CheckState.Unchecked;
   cb.Location = new System.Drawing.Point(50, 50);
   cb.Text = "Yes";
   cb.BackColor = System.Drawing.Color.CornflowerBlue;
   Control.FromHandle(Window.Handle).Controls.Add(cb);
 }
</code></pre>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image7.gif" alt="" /></p>

<p>Lets create an eventhandler and change the text value of checkbox object.</p>

<pre><code>protected override void Initialize()
 {
   base.Initialize();
   cb.CheckState = CheckState.Indeterminate;
   cb.Location = new System.Drawing.Point(50, 50);
   cb.Text = "Indeterminate";
   cb.BackColor = System.Drawing.Color.CornflowerBlue;
   cb.CheckStateChanged += new EventHandler(CBChanged);
   Control.FromHandle(Window.Handle).Controls.Add(cb);
 }
private void CBChanged(Object sender, EventArgs e)
 {
  if (cb.CheckState == CheckState.Unchecked)
 {
   cb.Text = "No";
 }
  else if (cb.CheckState == CheckState.Checked)
 {
   cb.Text = "Yes";
 }
 }
</code></pre>

<p>We have changed the code a little bit.</p>

<p>Check=Checked
No Check=Unchecked
Both of Them=Indeterminate</p>

<p>Lets run it!</p>

<p>Indeterminate Mode:</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image8.gif" alt="" /></p>

<p>Unchecked Mode:</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image9.gif" alt="" /></p>

<p>Checked Mode:</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image10.gif" alt="" /></p>

<p>I have explained Windows controls as detailed as i can.Now lets talk about the most exciting feature: WPF!</p>

<h4 id="wpf-user-controls">WPF User Controls:</h4>

<p>WPF User Controls are the most exciting controls we can add inside XNA Game.</p>

<p>But first we need to add some references that a WPF Application alone needs:
- Presentation Core
- Presentation Framework
- UIAutomationProvider
- WindowsBase
- WindowsFormsIntegration
After that we will be adding our pre-made WPFUserControl from Project-&gt;”Add Existing Item…”</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image11.gif" alt="" /></p>

<p>Find the files with Windows Markup Files &amp; C# Source file and add them:</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image12.gif" alt="" /></p>

<p>Now what we will do is to add them to our project as we have done before.</p>

<p>You can add the namespace we used for WPF UserControl. </p>

<pre><code>using WindowsFormsApplication1;  //That's the Namespace we have used inside WPF UserControl
</code></pre>

<p>Inside this WPF User Control we have added a combobox and an event “SelectionChanged” which shows us message for the selected item.</p>

<h4 id="code-of-wpf-usercontrol">Code of WPF UserControl:</h4>

<pre><code>private void comboBox1_SelectionChanged(object sender, SelectionChangedEventArgs e)
  {
ComboBoxItem cbi = ((ComboBox)sender).SelectedItem as ComboBoxItem;
MessageBox.Show(cbi.Content.ToString());
  }
</code></pre>

<h4 id="xaml-of-wpf-usercontrol">XAML of WPF UserControl:</h4>

<pre><code>&lt;UserControl x:Class="WindowsFormsApplication1.Kontrol1"
xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
Height="300" Width="300"&gt;
&lt;Grid&gt;
&lt;ComboBox Height="23" Margin="48,70,132,0" Name="comboBox1" VerticalAlignment="Top" SelectionChanged="comboBox1_SelectionChanged"&gt;
&lt;ComboBoxItem&gt;1&lt;/ComboBoxItem&gt;
&lt;ComboBoxItem&gt;2&lt;/ComboBoxItem&gt;
&lt;ComboBoxItem&gt;3&lt;/ComboBoxItem&gt;
&lt;ComboBoxItem&gt;4&lt;/ComboBoxItem&gt;
&lt;/ComboBox&gt;
&lt;/Grid&gt;
&lt;/UserControl&gt;
</code></pre>

<p>Lets add the control!</p>

<pre><code>Kontrol1 kontrol11 = new Kontrol1();
</code></pre>

<p>We declared the control.</p>

<p>Then inside “Initialize()” function call our control named Kontrol11…</p>

<pre><code>protected override void Initialize()
 {
   base.Initialize();
   //ElementHost object helps us to connect a WPF User Control.
   ElementHost elementHost1 = new ElementHost();
   elementHost1.Location = new System.Drawing.Point(308, 69);
   elementHost1.Name = "elementHost1";
   elementHost1.Size = new System.Drawing.Size(350, 181);
   elementHost1.TabIndex = 1;
   elementHost1.Text = "elementHost1";
   elementHost1.Child = this.kontrol11;
   Control.FromHandle(Window.Handle).Controls.Add(elementHost1);
 }
</code></pre>

<p>As you can see above we have added a WPF UserControl to our project</p>

<p>Lets run this project.Whats going to happen?</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image13.gif" alt="" /></p>

<p>Yes Different UIS such as XAML cannot be used in directly inside an XNA Game.For that we must convert it to Single-Threaded.</p>

<p>Open your Program.cs file:</p>

<p>Change as it is:</p>

<pre><code>using System;

namespace DemoTest
{
static class Program
{ 
[STAThread]
static void Main(string[] args)
{
using (Game1 game = new Game1())
{
game.Run();
}
}
}
}
</code></pre>

<p>[STAThread] Helps us to achieve this.Now our project is Single Threaded.And call any different UIs inside XNA!</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image14.gif" alt="" /></p>

<p>As you can see we have added it inside XNA Game!</p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image15.gif" alt="" /></p>

<p>We are selecting an item and then:</p>

<p>It shows us the selected value. </p>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/image16.gif" alt="" /></p>

<p>In this article I have written as detailed as much to explain how we can do all of this inside XNA Game.</p>

<p>By doing so you have integrated Windows Controls and WPF User Controls inside XNA!</p>

<p>I will tell much more about REXA(Rich-Effects XNA Applications) in the following days.</p>

<h4 id="update---full-screen">Update:   FULL SCREEN</h4>

<p>As you well know these samples run Windowed Mode.But what if they were running Full Screen?</p>

<p>If we use XNA’s graphics.ToggleFullScreen() or graphics.IsFullScreen=true  then all the things we have used -like Windows Controls and Dialogs- will disappear.Thats because Direct3D that XNA uses will take over the control and remove all the Window-based controls and dialogs from full screen view.</p>

<p>If we cant use XNA Framework for full screen what are we going to do? </p>

<p>It is easy to call a one-line code for full screen,isnt it? Well what are you going to do when you face something like that not able to see Windows Controls or anything related to Windows Object Model?</p>

<p>Theres a solution! : We will develop it the “Windows-Way”..</p>

<p>We will be using Windows API for Full Screen.So what i suggest you is to follow the steps then you will find it most easy:</p>

<h5 id="add-these-references-by-coding">1) Add these references by coding:</h5>

<pre><code>using System.Runtime.InteropServices;
</code></pre>

<h5 id="add-windows-api-declarations">2) Add Windows API declarations:</h5>

<p>[    DllImport(“user32.dll”)]
    private static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndIntertAfter, int X, int Y, int cx, int cy, int uFlags);
    [DllImport(“user32.dll”)]
    private static extern int GetSystemMetrics(int Which);</p>

<pre><code>private const int SM_CXSCREEN = 0;
private const int SM_CYSCREEN = 1;
private IntPtr HWND_TOP = IntPtr.Zero;
private const int SWP_SHOWWINDOW = 64;

These are going to show full screen or restore Windowed Mode.

3) Get Screen Values:

public int ScreenX
{
  get
  {
return GetSystemMetrics(SM_CXSCREEN);
  }
}
public int ScreenY
{
  get
  {
return GetSystemMetrics(SM_CYSCREEN);
  }
}
</code></pre>

<h5 id="write-full-screen--restore-codes">4) Write Full Screen &amp; Restore Codes:</h5>

<pre><code>private void FullScreen()
{
Form.FromHandle(Window.Handle).FindForm().WindowState=FormWindowState.Maximized;
Form.FromHandle(Window.Handle).FindForm().FormBorderStyle = FormBorderStyle.None;
Form.FromHandle(Window.Handle).FindForm().TopMost = true;
SetWindowPos(Window.Handle, HWND_TOP, 0, 0, ScreenX, ScreenY, SWP_SHOWWINDOW);
}
private void Restore()
{
Form.FromHandle(Window.Handle).FindForm().WindowState = FormWindowState.Normal;
Form.FromHandle(Window.Handle).FindForm().FormBorderStyle = FormBorderStyle.FixedDialog;
Form.FromHandle(Window.Handle).FindForm().TopMost = false;
}
</code></pre>

<h5 id="for-calling-these-2-functions-we-will-write-a-code--update-function">5) For calling these 2 functions we will write a code @ Update function:</h5>

<pre><code>KeyboardState newstat = Keyboard.GetState();
if (newstat.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
{
   FullScreen();
}
else if (newstat.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Space))
{
   Restore();
}  
</code></pre>

<p>If we click on Escape the game will run on Full Screen.If we press Space it will restore the Windowed Mode. </p>

<p>Lets run the updated part and see what happens:</p>

<h5 id="windowed-mode">Windowed Mode:</h5>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/1.gif" alt="" /></p>

<h5 id="full-screen">FULL SCREEN:</h5>

<p><img src="http://www.c-sharpcorner.com/UploadFile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/Images/2.gif" alt="" /></p>

<p>Thats it! We have successfully Run our project in Full Screen.As you can see its very simple isnt it?</p>

<p>参考：<a href="http://www.c-sharpcorner.com/uploadfile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/">http://www.c-sharpcorner.com/uploadfile/iersoy/windows-controls-and-wpf-usercontrols-inside-an-xna-game-project/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[泛珠三角超级赛车节秋季赛圆满落幕]]></title>
    <link href="http://xiebaochun.github.io/blog/2013/09/17/the-pan-delta-super-racing-festival/"/>
    <updated>2013-09-17T17:37:00+08:00</updated>
    <id>http://xiebaochun.github.io/blog/2013/09/17/the-pan-delta-super-racing-festival</id>
    <content type="html"><![CDATA[<p><img src="http://img1.gtimg.com/7/748/74890/7489035_116x86_0.jpg" alt="" /></p>

<p>2013年9月14-15日，2013泛珠三角超级赛车节秋季赛，也是泛珠本年度的收官大战在珠海国际赛车场举行。随着赛事落下帷幕，泛珠赛事也走完了9年的成长历程，即将迈入一个新的阶段。</p>

<p><img src="http://img1.gtimg.com/7/748/74890/7489041_116x86_0.jpg" alt="" /></p>

<p>本场赛事依然包含ZIC超级摩托车赛、赛道英雄壹、赛道英雄贰、红牛飘移大赛、泛珠AFR5项主要赛事，近150名选手参赛。各路英雄为了争夺年度积分，积极备战，为现场近3万观众们献上了一场精彩的龙争虎斗。</p>

<!--more-->

<p><img src="http://img1.gtimg.com/7/748/74890/7489037_980x1200_292.jpg" alt="" />
<img src="http://img1.gtimg.com/7/748/74890/7489041_980x1200_292.jpg" alt="" /></p>

<p><img src="http://img1.gtimg.com/6/609/60923/6092335_980x1200_292.jpg" alt="" /></p>

<p><img src="http://img1.gtimg.com/6/609/60923/6092330_980x1200_292.jpg" alt="" /></p>

<p>参考：<a href="http://sports.qq.com/f1/fanzhu.htm">http://sports.qq.com/f1/fanzhu.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用C#连接、操作MySQL数据库]]></title>
    <link href="http://xiebaochun.github.io/blog/2013/09/17/connect-c-number-to-mysql/"/>
    <updated>2013-09-17T11:25:00+08:00</updated>
    <id>http://xiebaochun.github.io/blog/2013/09/17/connect-c-number-to-mysql</id>
    <content type="html"><![CDATA[<p><img src="http://pic002.cnblogs.com/images/2012/326877/2012030820251174.jpg" alt="" />
<!--more--></p>

<pre><code>using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using System.IO;
//Add MySql Library
using MySql.Data.MySqlClient;

namespace ConnectCsharpToMysql
{
class DBConnect
{
    private MySqlConnection connection;
    private string server;
    private string database;
    private string uid;
    private string password;

    //Constructor
    public DBConnect()
    {
        Initialize();
    }

    //Initialize values
    private void Initialize()
    {
        server = "localhost";
        database = "csahrpdb";
        uid = "root";
        //password = "Abcd1234";
        password = "123456";

        string connectionString;
        connectionString = "SERVER=" + server + ";" + "DATABASE=" + database + ";" + "UID=" + uid + ";" + "PASSWORD=" + password + ";";

        connection = new MySqlConnection(connectionString);
    }


    //open connection to database
    private bool OpenConnection()
    {
        try
        {
            connection.Open();
            return true;
        }
        catch (MySqlException ex)
        {
            //When handling errors, you can your application's response based on the error number.
            //The two most common error numbers when connecting are as follows:
            //0: Cannot connect to server.
            //1045: Invalid user name and/or password.
            switch (ex.Number)
            {
                case 0:
                    MessageBox.Show("Cannot connect to server.  Contact administrator");
                    break;

                case 1045:
                    MessageBox.Show("Invalid username/password, please try again");
                    break;
            }
            return false;
        }
    }

    //Close connection
    private bool CloseConnection()
    {
        try
        {
            connection.Close();
            return true;
        }
        catch (MySqlException ex)
        {
            MessageBox.Show(ex.Message);
            return false;
        }
    }

    //Insert statement
    public void Insert()
    {
        string query = "INSERT INTO tableinfo (id,name, age) VALUES('11','John Smith', '33')";

        //open connection
        if (this.OpenConnection() == true)
        {
            //create command and assign the query and connection from the constructor
            MySqlCommand cmd = new MySqlCommand(query, connection);
            
            //Execute command
            cmd.ExecuteNonQuery();

            //close connection
            this.CloseConnection();
        }
    }

    //Update statement
    public void Update()
    {
        string query = "UPDATE tableinfo SET id='22', name='Joe', age='22' WHERE name='John Smith'";

        //Open connection
        if (this.OpenConnection() == true)
        {
            //create mysql command
            MySqlCommand cmd = new MySqlCommand();
            //Assign the query using CommandText
            cmd.CommandText = query;
            //Assign the connection using Connection
            cmd.Connection = connection;

            //Execute query
            cmd.ExecuteNonQuery();

            //close connection
            this.CloseConnection();
        }
    }

    //Delete statement
    public void Delete(int id)
    {
        string query = "DELETE FROM tableinfo WHERE id=" + id;

        if (this.OpenConnection() == true)
        {
            MySqlCommand cmd = new MySqlCommand(query, connection);
            cmd.ExecuteNonQuery();
            this.CloseConnection();
        }
    }
  
    //Select statement
    public List&lt;string&gt;[] Select()
    {
        string query = "SELECT * FROM tableinfo";

        //Create a list to store the result
        List&lt;string&gt;[] list = new List&lt;string&gt;[3];
        list[0] = new List&lt;string&gt;();
        list[1] = new List&lt;string&gt;();
        list[2] = new List&lt;string&gt;();

        //Open connection
        if (this.OpenConnection() == true)
        {
            //Create Command
            MySqlCommand cmd = new MySqlCommand(query, connection);
            //Create a data reader and Execute the command
            MySqlDataReader dataReader = cmd.ExecuteReader();
            
            //Read the data and store them in the list
            while (dataReader.Read())
            {
                list[0].Add(dataReader["id"] + "");
                list[1].Add(dataReader["name"] + "");
                list[2].Add(dataReader["age"] + "");
            }

            //close Data Reader
            dataReader.Close();

            //close Connection
            this.CloseConnection();

            //return list to be displayed
            return list;
        }
        else
        {
            return list;
        }
    }

    //Count statement
    public int Count()
    {
        string query = "SELECT Count(*) FROM tableinfo";
        int Count = -1;

        //Open Connection
        if (this.OpenConnection() == true)
        {
            //Create Mysql Command
            MySqlCommand cmd = new MySqlCommand(query, connection);

            //ExecuteScalar will return one value
            Count = int.Parse(cmd.ExecuteScalar()+"");
            
            //close Connection
            this.CloseConnection();

            return Count;
        }
        else
        {
            return Count;
        }
    }

    //Backup
    public void Backup()
    {
        try
        {
            DateTime Time = DateTime.Now;
            int year = Time.Year;
            int month = Time.Month;
            int day = Time.Day;
            int hour = Time.Hour;
            int minute = Time.Minute;
            int second = Time.Second;
            int millisecond = Time.Millisecond;

            //Save file to C:\ with the current date as a filename
            string path;
            path = "C:\\" + year + "-" + month + "-" + day + "-" + hour + "-" + minute + "-" + second + "-" + millisecond + ".sql";
            StreamWriter file = new StreamWriter(path);

            
            ProcessStartInfo psi = new ProcessStartInfo();
            psi.FileName = "mysqldump";
            psi.RedirectStandardInput = false;
            psi.RedirectStandardOutput = true;
            psi.Arguments = string.Format(@"-u{0} -p{1} -h{2} {3}", uid, password, server, database);
            psi.UseShellExecute = false;

            Process process = Process.Start(psi);

            string output;
            output = process.StandardOutput.ReadToEnd();
            file.WriteLine(output);
            process.WaitForExit();
            file.Close();
            process.Close();
        }
        catch (IOException ex)
        {
            MessageBox.Show("Error , unable to backup!");
        }
    }

    //Restore
    public void Restore()
    {
        try
        {
            //Read file from C:\
            string path;
            path = "C:\\MySqlBackup.sql";
            StreamReader file = new StreamReader(path);
            string input = file.ReadToEnd();
            file.Close();


            ProcessStartInfo psi = new ProcessStartInfo();
            psi.FileName = "mysql";
            psi.RedirectStandardInput = true;
            psi.RedirectStandardOutput = false;
            psi.Arguments = string.Format(@"-u{0} -p{1} -h{2} {3}", uid, password, server, database);
            psi.UseShellExecute = false;

            
            Process process = Process.Start(psi);
            process.StandardInput.WriteLine(input);
            process.StandardInput.Close();
            process.WaitForExit();
            process.Close();
        }
        catch (IOException ex)
        {
            MessageBox.Show("Error , unable to Restore!");
        }
    }
} }
</code></pre>

<p>示例下载:<a href="https://codeload.github.com/xiebaochun/.net-dev/zip/master">https://codeload.github.com/xiebaochun/.net-dev/zip/master</a></p>

<p>参考文档：<a href="http://www.cnblogs.com/da6wei6/archive/2008/08/27/1277309.html">http://www.cnblogs.com/da6wei6/archive/2008/08/27/1277309.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用C#生成不重复的随机数]]></title>
    <link href="http://xiebaochun.github.io/blog/2013/09/17/generate-unrepeat-random-number-using-c-number/"/>
    <updated>2013-09-17T09:20:00+08:00</updated>
    <id>http://xiebaochun.github.io/blog/2013/09/17/generate-unrepeat-random-number-using-c-number</id>
    <content type="html"><![CDATA[<p>对于随机数，大家都知道，计算机不可能产生完全随机的数字，所谓的随机数发生器都是通过一定的算法对事先选定的随机种子做复杂的运算，用产生的结果来近似的模拟完全随机数，这种随机数被称 作伪随机数。伪随机数是以相同的概率从一组有限的数字中选取的。所选数字并不具有完全的随机性，但是从实用的角度而言，其随机程度已足够了。伪随机数的选 择是从随机种子开始的，所以为了保证每次得到的伪随机数都足够地“随机”，随机种子的选择就显得非常重要。如果随机种子一样，那么同一个随机数发生器产生 的随机数也会一样。一般地，我们使用同系统时间有关的参数作为随机种子，这也是.net Framework中的随机数发生器默认采用的方法。
<!--more-->
　　我们可以使用两种方式初始化一个随机数发生器：</p>

<p>　　第一种方法不指定随机种子，系统自动选取当前时间作为随机种子：</p>

<pre><code>　　Random ro = new Random();
</code></pre>

<p>　　第二种方法可以指定一个int型参数作为随机种子：</p>

<pre><code>　　int iSeed=10;
　　Random ro = new Random(10);
　　long tick = DateTime.Now.Ticks;
　　Random ran = new Random((int)(tick &amp; 0xffffffffL) | (int) (tick &gt;&gt; 32));
</code></pre>

<p>　　这样可以保证99%不是一样。
　　之后，我们就可以使用这个Random类的对象来产生随机数，这时候要用到<code>Random.Next()</code>方法。这个方法使用相当灵活，你甚至可以指定产生的随机数的上下限。
　　不指定上下限的使用如下：</p>

<pre><code>　　int iResult;
　　iResult=ro.Next();
</code></pre>

<p>　　下面的代码指定返回小于100的随机数：</p>

<pre><code>　　int iResult;
　　int iUp=100;
　　iResult=ro.Next(iUp);
</code></pre>

<p>　　而下面这段代码则指定返回值必须在50-100的范围之内：</p>

<pre><code>　　int iResult;
　　int iUp=100;
　　int iDown=50;
　　iResult=ro.Next(iDown,iUp);
</code></pre>

<p>　　除了Random.Next()方法之外，Random类还提供了Random.NextDouble()方法产生一个范围在0.0-1.0之间的随机的双精度浮点数：</p>

<pre><code>　　double dResult;
　　dResult=ro.NextDouble();
</code></pre>

<p>　　但是用Random类生成题号，会出现重复，特别是在数量较小的题目中要生成不重复的的题目是很难的，参考了网上的一些方法，包括两类，一类是通过随机种子入手，使每一次的随机种子不同，来保证不重复；第二类是使用一些数据结构和算法。下面主要就第二类介绍几个方法。
　 　
   方法1：思想是用一个数组来保存索引号，先随机生成一个数组位置，然后把这个位置的索引号取出来，并把最后一个索引号复制到当前的数组位置，然后使随机 数的上限减一，具体如：先把这100个数放在一个数组内，每次随机取一个位置（第一次是1-100，第二次是1-99，…），将该位置的数用最后的数 代替。</p>

<pre><code> 　　int[] index = new int[15];
　　for (int i = 0; i &lt; 15; i++)
　　　　index = i;
　　Random r = new Random();
　　//用来保存随机生成的不重复的10个数
　　int[] result = new int[10];
　　int site = 15;//设置下限
　　int id;
　　for (int j = 0; j &lt; 10; j++)
　　{
　　　　id = r.Next(1, site - 1);
　　　　   //在随机位置取出一个数，保存到结果数组`
　　　　result[j] = index[id];
　　　　//最后一个数复制到当前位置
　　　　index[id] = index[site - 1];
　　　　//位置的下限减少一
　　　　site--;
　　}
</code></pre>

<p>　方法2：利用Hashtable。[NextPage]</p>

<pre><code> 　 Hashtable hashtable = new Hashtable();
　  Random rm = new Random();
　　int RmNum = 10;
　　for (int i = 0; hashtable.Count &lt; RmNum; i++)
　　{
   　　 int nValue = rm.Next(100);
  　　  if (!hashtable.ContainsValue(nValue) &amp;&amp; nValue != 0)
  　　  {
  　　   hashtable.Add(nValue, nValue);
  　　   Console.WriteLine(nValue.ToString());
  　　  }
　　}
</code></pre>

<p>　　方法3：递归，用它来检测生成的随机数是否有重复，如果取出来的数字和已取得的数字有重复就重新随机获取。</p>

<pre><code> 　Random ra=new Random(unchecked((int)DateTime.Now.Ticks));
　　int[] arrNum=new int[10];
　　int tmp=0;
　　int minValue=1;
　　int maxValue=10;
　　for (int i=0;i&lt;10;i++)
　　{
　　　　tmp=ra.Next(minValue,maxValue); //随机取数
　　　　arrNum=getNum(arrNum,tmp,minValue,maxValue,ra); //取出值赋到数组中
　　}
　　.........
　　.........
　　public int getNum(int[] arrNum,int tmp,int minValue,int maxValue,Random ra)
　　{
　　　　int n=0;
　　　　while (n&lt;=arrNum.Length-1)
　　　　{
　　　　　　if (arrNum[n]==tmp) //利用循环判断是否有重复
　　　　　　{
　　　　　　　　tmp=ra.Next(minValue,maxValue); //重新随机获取。
　　　　　　　　getNum(arrNum,tmp,minValue,maxValue,ra);//递归:如果取出来的数字和已取得的数字有重复就重新随机获取。
　　　　　　}
　　　　n++;
　　　　}
　　　　return tmp;
　　}
</code></pre>

<p>参考：
<a href="http://www.pcjx.com/Dotnet/C/208333.html">http://www.pcjx.com/Dotnet/C/208333.html</a>
<a href="http://www.cnblogs.com/xiaohaikong/archive/2009/08/13/1545154.html">http://www.cnblogs.com/xiaohaikong/archive/2009/08/13/1545154.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何为XNA创建输入框(how to create an XNA textbox)]]></title>
    <link href="http://xiebaochun.github.io/blog/2013/09/16/how-to-create-an-xna-textbox/"/>
    <updated>2013-09-16T17:37:00+08:00</updated>
    <id>http://xiebaochun.github.io/blog/2013/09/16/how-to-create-an-xna-textbox</id>
    <content type="html"><![CDATA[<p><a href="You can download source code here!">You can download source code here!</a></p>

<p><img src="http://www.codeproject.com/KB/game/532550/SecondPage_of_myprogrma.png" alt="" />
<!--more--></p>

<h3 id="introduction">Introduction</h3>

<p>As there was no text box in the XNA environment I was forced to create a text box by myself, and wanted to share the solution here for programmers.</p>

<h3 id="using-the-code">Using the Code</h3>

<p>First think that we need to draw our text, so what do we need to wrap text in a rectangle? Below is my source code to wrap text in a rectangle by width. So the spirtfont is for measurement purposes, text is what you want to wrap in the textbox, and maxLineWidth is the parameter for the width of the TextBox.</p>

<h3 id="lets-first-define-some-structs">let’s first define some structs:</h3>

<pre><code> Collapse | Copy Code
public struct Text
{
public int key;
public string myText;
public int FontSize;
public Rectangle rect;
public Color mycolor;
public string strplaceOfUse;
public bool ShouldItBeShownInThisScreen;
public string wrappedString;
public int HorizontalMargin;
public string Action;
public bool isFocused;
}
public struct mylist
{
public string mystring;
public int key;
}
</code></pre>

<h3 id="lets-create-a-function-to-load-fonts">Let’s create a function to load fonts:</h3>

<pre><code> Collapse | Copy Code
//
public SpriteFont fncGivemeFont(int fontsize)
{
string BaseDirectory = ".";
SpriteFont myfont=null;
switch (fontsize)
{
case 14:
{
myfont = content.Load&lt;SpriteFont&gt;(BaseDirectory + "\\Font\\myfont14");
break;
}
case 16:
{
myfont = content.Load&lt;SpriteFont&gt;(BaseDirectory + "\\Font\\myfont16");
break;
}
case 18:
{
myfont = content.Load&lt;SpriteFont&gt;(BaseDirectory + "\\Font\\myfont18");
break;
}
case 20:
{
myfont = content.Load&lt;SpriteFont&gt;(BaseDirectory + "\\Font\\myfont20");
break;
}
case 22:
{
myfont = content.Load&lt;SpriteFont&gt;(BaseDirectory + "\\Font\\myfont22");
break;
}
default:
{
myfont = content.Load&lt;SpriteFont&gt;(BaseDirectory + "\\Font\\myfont14");
break;
}
}
return myfont;
}
</code></pre>

<h3 id="now-we-initialize-our-text">Now we initialize our text:</h3>

<pre><code> Collapse | Copy Code
//mytext
mytext.key = 0;
mytext.HorizontalMargin = 50;
mytext.mycolor = Color.Blue;
mytext.rect = new Rectangle((WindowsScreenWidth - 1000) / 2 + mytext.HorizontalMargin, 
  (WindowsScreenHeight - 300) / 2 + 50, 1000 - 1 * mytext.HorizontalMargin, 300);
mytext.strplaceOfUse = "AddNewWords_Word";
mytext.ShouldItBeShownInThisScreen = false;
mytext.myText = "";
mytext.FontSize = 22;
mytext.wrappedString = WrapText(fncGivemeFont(mytext.FontSize), mytext.myText, mytext.rect.Width);
mytext.Action="TextBox";
mytext.isFocused=true;
//ArrayList=&gt;MyTexts
myTexts[0] = mytext;
The output of this function is another string, however it has a \n to do our wrap in it.

 Collapse | Copy Code
public static string WrapText(SpriteFont spriteFont, string text, float maxLineWidth)
{
string[] words = text.Split(' ');
StringBuilder sb = new StringBuilder();
//
ArrayList MyFormattedWords=new ArrayList();
int currentkey=0;
//
float lineWidth = 0f;

float spaceWidth = spriteFont.MeasureString(" ").X;
Vector2 ResidueSize = Vector2.Zero;
foreach (string word in words)
{
Vector2 size = spriteFont.MeasureString(word);
if (size.X &gt; maxLineWidth)
{

string tempstr1 = "";
int EndIndexOfSplittedWord = 0;
ArrayList mystringList = new ArrayList();
int SplittedWordIndex = 0;
int StartIndexOfSplittedWord = 0;
for (int i = 0; i &lt; word.Length; i++)
{
tempstr1 += word[i];
Vector2 mytempstrsize = spriteFont.MeasureString(tempstr1);
if (mytempstrsize.X &gt;= maxLineWidth)
{
EndIndexOfSplittedWord = i - 1;
mylist objstring = new mylist();
objstring.mystring = "";
SplittedWordIndex++;
objstring.key = SplittedWordIndex;
for (int j = StartIndexOfSplittedWord; j &lt; EndIndexOfSplittedWord; j++)
{
objstring.mystring += word[j].ToString();
}
mystringList.Add(objstring);
tempstr1 = word[i].ToString();
StartIndexOfSplittedWord = i;
if (i == word.Length - 1)
{
mylist objstring2 = new mylist();
objstring2.mystring = tempstr1;
SplittedWordIndex++;
objstring2.key = SplittedWordIndex;
mystringList.Add(objstring2);
}
}
else if (!(mytempstrsize.X &gt;= maxLineWidth))
{
if (i == word.Length - 1)
{
mylist objstring3 = new mylist();
objstring3.mystring = tempstr1;
SplittedWordIndex++;
objstring3.key = SplittedWordIndex;
mystringList.Add(objstring3);
}
}
}
 //
string mystr = "";
for (int i = 1; i &lt;= SplittedWordIndex; i++)
{
foreach (mylist objlist in mystringList)
{
if (objlist.key == i)
{
currentkey++;
mylist formattedobjlist;
formattedobjlist.key=currentkey;
formattedobjlist.mystring=objlist.mystring;
   MyFormattedWords.Add(formattedobjlist);
}
}
}
sb.Append(mystr);
}
else
{
currentkey++;
mylist formattedobjlist;
formattedobjlist.key = currentkey;
formattedobjlist.mystring = word;
MyFormattedWords.Add(formattedobjlist);
}
}
for (int i=1;i&lt;=currentkey;i++)
{
foreach (mylist wordx in MyFormattedWords)
{
if (i == wordx.key)
{
Vector2 size = spriteFont.MeasureString(wordx.mystring);

if (lineWidth + size.X &lt; maxLineWidth)
{
sb.Append(wordx.mystring + " ");
lineWidth += size.X + spaceWidth;
}
else
{
sb.Append("\n" + wordx.mystring + " ");
lineWidth = size.X + spaceWidth;
}
}
}
}
return sb.ToString();
}  
</code></pre>

<p>So now we create our wrap function. We should get the input from the user, how do we do it? Here is the code: </p>

<h3 id="first-we-need-a-class-to-define-our-parameters-of-the-keys-and-stuff-lets-name-the-class-clsinput">First we need a class to define our parameters of the keys and stuff: Let’s name the class clsInput:</h3>

<pre><code> Collapse | Copy Code
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using System.Collections;
using System.Text;
namespace Language_Learning_Application
{
class clsInput
{
public string AKeyState = "none";
public string BKeyState = "none";
public string CKeyState = "none";
public string DKeyState = "none";
public string EKeyState = "none";
public string FKeyState = "none";
public string GKeyState = "none";
public string HKeyState = "none";
public string IKeyState = "none";
public string JKeyState = "none";
public string KKeyState = "none";
public string LKeyState = "none";
public string MKeyState = "none";
public string NKeyState = "none";
public string OKeyState = "none";
public string PKeyState = "none";
public string QKeyState = "none";
public string RKeyState = "none";
public string SKeyState = "none";
public string TKeyState = "none";
public string UKeyState = "none";
public string VKeyState = "none";
public string WKeyState = "none";
public string XKeyState = "none";
public string YKeyState = "none";
public string ZKeyState = "none";
public string SpaceKeyState = "none";
public string BackKeyState = "none";
/// //////////////////////////////////////////////
public string OemSemicolonKeyState = "none";
public string OemQuotesKeyState = "none";
public string OemCommaKeyState = "none";
public string OemPeriodKeyState = "none";
public string OemQuestionKeyState = "none";
/////////////////////////////////////////////////
public string OemOpenBracketsKeyState = "none";
public string OemCloseBracketsKeyState = "none";
public string OemPipeKeyState = "none";
//////////////////////////////////////////////////
public string D1KeyState = "none";
public string D2KeyState = "none";
public string D3KeyState = "none";
public string D4KeyState = "none";
public string D5KeyState = "none";
public string D6KeyState = "none";
public string D7KeyState = "none";
public string D8KeyState = "none";
public string D9KeyState = "none";
public string D0KeyState = "none";
//////////////////////////////////////////////////
public string OemTildeKeyState = "none";
public string OemMinusKeyState = "none";
public string OemPlusKeyState = "none";
/// ////////////////////////////////////////////////
public bool isShiftPressed(Keys[] mykeys)
{
bool result = false;
foreach (Keys key in mykeys)
{
if (key == Keys.LeftShift || key == Keys.RightShift)
{
result = true;
}
}
return result;
}
public bool isControlPressed(Keys[] mykeys)
{
bool result = false;
foreach (Keys key in mykeys)
{
if (key == Keys.LeftControl || key == Keys.RightControl)
{
result = true;
}
}
return result;
}
}
}
</code></pre>

<h3 id="great-now-we-code-for-getting-the-keyboard-input-from-the-user">Great, now we code for getting the keyboard input from the user:</h3>

<pre><code> Collapse | Copy Code
bool IsGettingStringFromUseron = false;
string keyboardString = "";
clsInput myclsinput = new clsInput();
public void OnKeyboardKeyPress(KeyboardState myKeyboardState)
{
if(IsGettingStringFromUseron)
{
Keys[] mykeys=myKeyboardState.GetPressedKeys();
bool isShift = myclsinput.isShiftPressed(mykeys);
bool isControl = myclsinput.isControlPressed(mykeys);
if (myKeyboardState.IsKeyDown(Keys.A))
{
if (myclsinput.AKeyState == "none") myclsinput.AKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.A))
{
if (myclsinput.AKeyState == "down")
{
if (isShift) keyboardString += "A";
else keyboardString += "a";
myclsinput.AKeyState = "none";
}
}
////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.Space))
{
if (myclsinput.SpaceKeyState == "none") myclsinput.SpaceKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.Space))
{
if (myclsinput.SpaceKeyState == "down")
{
keyboardString += " ";
myclsinput.SpaceKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.B))
{
if (myclsinput.BKeyState == "none") myclsinput.BKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.B))
{
if (myclsinput.BKeyState == "down")
{
if (isShift) keyboardString += "B";
else keyboardString += "b";
myclsinput.BKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.Z))
{
if (myclsinput.ZKeyState == "none") myclsinput.ZKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.Z))
{
if (myclsinput.ZKeyState == "down")
{
if (isShift) keyboardString += "Z";
else keyboardString += "z";
myclsinput.ZKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.C))
{
if (myclsinput.CKeyState == "none") myclsinput.CKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.C))
{
if (myclsinput.CKeyState == "down")
{
if (isShift) keyboardString += "C";
else keyboardString += "c";
myclsinput.CKeyState = "none";
}
}
////////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.D))
{
if (myclsinput.DKeyState == "none") myclsinput.DKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.D))
{
if (myclsinput.DKeyState == "down")
{
if (isShift) keyboardString += "D";
else keyboardString += "d";
myclsinput.DKeyState = "none";
}
}
////////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.E))
{
if (myclsinput.EKeyState == "none") myclsinput.EKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.E))
{
if (myclsinput.EKeyState == "down")
{
if (isShift) keyboardString += "E";
else keyboardString += "e";
myclsinput.EKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.F))
{
if (myclsinput.FKeyState == "none") myclsinput.FKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.F))
{
if (myclsinput.FKeyState == "down")
{
if (isShift) keyboardString += "F";
else keyboardString += "f";
myclsinput.FKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.G))
{
if (myclsinput.GKeyState == "none") myclsinput.GKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.G))
{
if (myclsinput.GKeyState == "down")
{
if (isShift) keyboardString += "G";
else keyboardString += "g";
myclsinput.GKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.H))
{
if (myclsinput.HKeyState == "none") myclsinput.HKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.H))
{
if (myclsinput.HKeyState == "down")
{
if (isShift) keyboardString += "H";
else keyboardString += "h";
myclsinput.HKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.I))
{
if (myclsinput.IKeyState == "none") myclsinput.IKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.I))
{
if (myclsinput.IKeyState == "down")
{
if (isShift) keyboardString += "I";
else keyboardString += "i";
myclsinput.IKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.J))
{
if (myclsinput.JKeyState == "none") myclsinput.JKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.J))
{
if (myclsinput.JKeyState == "down")
{
if (isShift) keyboardString += "J";
else keyboardString += "j";
myclsinput.JKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.K))
{
if (myclsinput.KKeyState == "none") myclsinput.KKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.K))
{
if (myclsinput.KKeyState == "down")
{
if (isShift) keyboardString += "K";
else keyboardString += "k";
myclsinput.KKeyState = "none";
}
}
if (myKeyboardState.IsKeyDown(Keys.L))
{
if (myclsinput.LKeyState == "none") myclsinput.LKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.L))
{
if (myclsinput.LKeyState == "down")
{
if (isShift) keyboardString += "L";
else keyboardString += "l";
myclsinput.LKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.M))
{
if (myclsinput.MKeyState == "none") myclsinput.MKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.M))
{
if (myclsinput.MKeyState == "down")
{
if (isShift) keyboardString += "M";
else keyboardString += "m";
myclsinput.MKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.N))
{
if (myclsinput.NKeyState == "none") myclsinput.NKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.N))
{
if (myclsinput.NKeyState == "down")
{
if (isShift) keyboardString += "N";
else keyboardString += "n";
myclsinput.NKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.O))
{
if (myclsinput.OKeyState == "none") myclsinput.OKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.O))
{
if (myclsinput.OKeyState == "down")
{
if (isShift) keyboardString += "O";
else keyboardString += "o";
myclsinput.OKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.P))
{
if (myclsinput.PKeyState == "none") myclsinput.PKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.P))
{
if (myclsinput.PKeyState == "down")
{
if (isShift) keyboardString += "P";
else keyboardString += "p";
myclsinput.PKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.Q))
{
if (myclsinput.QKeyState == "none") myclsinput.QKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.Q))
{
if (myclsinput.QKeyState == "down")
{
if (isShift) keyboardString += "Q";
else keyboardString += "q";
myclsinput.QKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.R))
{
if (myclsinput.RKeyState == "none") myclsinput.RKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.R))
{
if (myclsinput.RKeyState == "down")
{
if (isShift) keyboardString += "R";
else keyboardString += "r";
myclsinput.RKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.S))
{
if (myclsinput.SKeyState == "none") myclsinput.SKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.S))
{
if (myclsinput.SKeyState == "down")
{
if (isShift) keyboardString += "S";
else keyboardString += "s";
myclsinput.SKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.T))
{
if (myclsinput.TKeyState == "none") myclsinput.TKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.T))
{
if (myclsinput.TKeyState == "down")
{
if (isShift) keyboardString += "T";
else keyboardString += "t";
myclsinput.TKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.U))
{
if (myclsinput.UKeyState == "none") myclsinput.UKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.U))
{
if (myclsinput.UKeyState == "down")
{
if (isShift) keyboardString += "U";
else keyboardString += "u";
myclsinput.UKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.V))
{
if (myclsinput.VKeyState == "none") myclsinput.VKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.V))
{
if (myclsinput.VKeyState == "down")
{
if (isShift) keyboardString += "V";
else keyboardString += "v";
myclsinput.VKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.W))
{
if (myclsinput.WKeyState == "none") myclsinput.WKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.W))
{
if (myclsinput.WKeyState == "down")
{
if (isShift) keyboardString += "W";
else keyboardString += "w";
myclsinput.WKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.Y))
{
if (myclsinput.YKeyState == "none") myclsinput.YKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.Y))
{
if (myclsinput.YKeyState == "down")
{
if (isShift) keyboardString += "Y";
else keyboardString += "y";
myclsinput.YKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.X))
{
if (myclsinput.XKeyState == "none") myclsinput.XKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.X))
{
if (myclsinput.XKeyState == "down")
{
if (isShift) keyboardString += "X";
else keyboardString += "x";
myclsinput.XKeyState = "none";
}
}
/////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.OemSemicolon))
{
if (myclsinput.OemSemicolonKeyState == "none") myclsinput.OemSemicolonKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.OemSemicolon))
{
if (myclsinput.OemSemicolonKeyState == "down")
{
if (isShift) keyboardString += ":";
else keyboardString += ";";
myclsinput.OemSemicolonKeyState = "none";
}
}
/////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.OemQuotes))
{
if (myclsinput.OemQuotesKeyState == "none") myclsinput.OemQuotesKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.OemQuotes))
{
if (myclsinput.OemQuotesKeyState == "down")
{
if (isShift) keyboardString += "\"";
else keyboardString += "'";
myclsinput.OemQuotesKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.Back))
{
if (myclsinput.BackKeyState == "none") myclsinput.BackKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.Back))
{
if (myclsinput.BackKeyState == "down")
{
 if(keyboardString!="")keyboardString = keyboardString.Remove(keyboardString.Length - 1);
 myclsinput.BackKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.OemComma))
{
if (myclsinput.OemCommaKeyState == "none") myclsinput.OemCommaKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.OemComma))
{
if (myclsinput.OemCommaKeyState == "down")
{
if (isShift) keyboardString += "&lt;";
else keyboardString += ",";
myclsinput.OemCommaKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.OemPeriod))
{
if (myclsinput.OemPeriodKeyState == "none") myclsinput.OemPeriodKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.OemPeriod))
{
if (myclsinput.OemPeriodKeyState == "down")
{
if (isShift) keyboardString += "&gt;";
else keyboardString += ".";
myclsinput.OemPeriodKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.OemQuestion))
{
if (myclsinput.OemQuestionKeyState == "none") myclsinput.OemQuestionKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.OemQuestion))
{
if (myclsinput.OemQuestionKeyState == "down")
{
if (isShift) keyboardString += "?";
else keyboardString += "/";
myclsinput.OemQuestionKeyState = "none";
}
} 
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.OemOpenBrackets))
{
if (myclsinput.OemOpenBracketsKeyState == "none") myclsinput.OemOpenBracketsKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.OemOpenBrackets))
{
if (myclsinput.OemOpenBracketsKeyState == "down")
{
if (isShift) keyboardString += "{";
else keyboardString += "[";
myclsinput.OemOpenBracketsKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.OemCloseBrackets))
{
if (myclsinput.OemCloseBracketsKeyState == "none") myclsinput.OemCloseBracketsKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.OemCloseBrackets))
{
if (myclsinput.OemCloseBracketsKeyState == "down")
{
if (isShift) keyboardString += "}";
else keyboardString += "]";
myclsinput.OemCloseBracketsKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.OemPipe))
{
if (myclsinput.OemPipeKeyState == "none") myclsinput.OemPipeKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.OemPipe))
{
if (myclsinput.OemPipeKeyState == "down")
{
if (isShift) keyboardString += "|";
else keyboardString += "\\";
myclsinput.OemPipeKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.D1))
{
if (myclsinput.D1KeyState == "none") myclsinput.D1KeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.D1))
{
if (myclsinput.D1KeyState == "down")
{
if (isShift) keyboardString += "!";
else keyboardString += "1";
myclsinput.D1KeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.D2))
{
if (myclsinput.D2KeyState == "none") myclsinput.D2KeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.D2))
{
if (myclsinput.D2KeyState == "down")
{
if (isShift) keyboardString += "@";
else keyboardString += "2";
myclsinput.D2KeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.D3))
{
if (myclsinput.D3KeyState == "none") myclsinput.D3KeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.D3))
{
if (myclsinput.D3KeyState == "down")
{
if (isShift) keyboardString += "#";
else keyboardString += "3";
myclsinput.D3KeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.D4))
{
if (myclsinput.D4KeyState == "none") myclsinput.D4KeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.D4))
{
if (myclsinput.D4KeyState == "down")
{
if (isShift) keyboardString += "$";
else keyboardString += "4";
myclsinput.D4KeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.D5))
{
if (myclsinput.D5KeyState == "none") myclsinput.D5KeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.D5))
{
if (myclsinput.D5KeyState == "down")
{
if (isShift) keyboardString += "%";
else keyboardString += "5";
myclsinput.D5KeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.D6))
{
if (myclsinput.D6KeyState == "none") myclsinput.D6KeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.D6))
{
if (myclsinput.D6KeyState == "down")
{
if (isShift) keyboardString += "^";
else keyboardString += "6";
myclsinput.D6KeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.D7))
{
if (myclsinput.D7KeyState == "none") myclsinput.D7KeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.D7))
{
if (myclsinput.D7KeyState == "down")
{
if (isShift) keyboardString += "&amp;";
else keyboardString += "7";
myclsinput.D7KeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.D8))
{
if (myclsinput.D8KeyState == "none") myclsinput.D8KeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.D8))
{
if (myclsinput.D8KeyState == "down")
{
if (isShift) keyboardString += "*";
else keyboardString += "8";
myclsinput.D8KeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.D9))
{
if (myclsinput.D9KeyState == "none") myclsinput.D9KeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.D9))
{
if (myclsinput.D9KeyState == "down")
{
if (isShift) keyboardString += "(";
else keyboardString += "9";
myclsinput.D9KeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.D0))
{
if (myclsinput.D0KeyState == "none") myclsinput.D0KeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.D0))
{
if (myclsinput.D0KeyState == "down")
{
if (isShift) keyboardString += ")";
else keyboardString += "0";
myclsinput.D0KeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.OemTilde))
{
if (myclsinput.OemTildeKeyState == "none") myclsinput.OemTildeKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.OemTilde))
{
if (myclsinput.OemTildeKeyState == "down")
{
if (isShift) keyboardString += "~";
else keyboardString += "`";
myclsinput.OemTildeKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.OemMinus))
{
if (myclsinput.OemMinusKeyState == "none") myclsinput.OemMinusKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.OemMinus))
{
if (myclsinput.OemMinusKeyState == "down")
{
if (isShift) keyboardString += "_";
else keyboardString += "-";
myclsinput.OemMinusKeyState = "none";
}
}
///////////////////////////////////////////////////////////
if (myKeyboardState.IsKeyDown(Keys.OemPlus))
{
if (myclsinput.OemPlusKeyState == "none") myclsinput.OemPlusKeyState = "down";
}
if (myKeyboardState.IsKeyUp(Keys.OemPlus))
{
if (myclsinput.OemPlusKeyState == "down")
{
if (isShift) keyboardString += "+";
else keyboardString += "=";
myclsinput.OemPlusKeyState = "none";
}
}
///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
}
}
</code></pre>

<p>So this would be our function to get the keyboard state and keys from the user.</p>

<p>Now let’s draw our string on a rectangle:</p>

<pre><code> Collapse | Copy Code
public void DrawTexts(SpriteBatch mybatch)
{
for (int i = 0; i &lt; myTexts.Length; i++)
{
if (myTexts[i].ShouldItBeShownInThisScreen)
{
mybatch.DrawString(fncGivemeFont(myTexts[i].FontSize), 
  myTexts[i].wrappedString, 
  new Vector2(myTexts[i].rect.Left,myTexts[i].rect.Top),
  myTexts[i].mycolor);
}
}
}
</code></pre>

<h3 id="points-of-interest">Points of Interest</h3>

<p>Well, wrapping a text will get you a complete day, so I recommend you to recommend Microsoft to create some stuff like textbox for XNA and make it easier to work with this great technology for programmers. I really suggest you have a look at the wrapper function and make it more perfect. I worked  a day on it, you can put half a day and make it useful for any font and any height of a rectangle.</p>

<p>If there may be any updates, you may get it here, don’t go elsewhere. Thanks for reading my article. Love all coders &lt;3.</p>

<p>参考：<a href="http://www.codeproject.com/Tips/532550/How-to-create-an-XNA-textbox">http://www.codeproject.com/Tips/532550/How-to-create-an-XNA-textbox</a></p>
]]></content>
  </entry>
  
</feed>
