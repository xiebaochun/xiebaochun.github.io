<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | 微个日光日]]></title>
  <link href="http://xiebaochun.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://xiebaochun.github.io/"/>
  <updated>2014-08-06T16:20:58+08:00</updated>
  <id>http://xiebaochun.github.io/</id>
  <author>
    <name><![CDATA[Nicholas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSB内存管理（Memory Management of JSB）]]></title>
    <link href="http://xiebaochun.github.io/blog/2013/10/16/memory-management-of-jsb/"/>
    <updated>2013-10-16T15:23:00+08:00</updated>
    <id>http://xiebaochun.github.io/blog/2013/10/16/memory-management-of-jsb</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://www.cocos2d-x.org/wiki/Memory_Management_of_JSB">http://www.cocos2d-x.org/wiki/Memory_Management_of_JSB</a></p>

<p>注：因译者水平有限，如有错误，请批评指正。</p>

<h2 id="jsb">JSB的内存管理</h2>

<p>基于Cocos2d-x 2.15,但同样适用于Cocos2d-x 3.0。</p>

<h3 id="jsb-1">JSB对象的生命周期</h3>

<p>总所周知，javascript有自己的内存管理机制，即垃圾回收。Cocos2d-x模拟垃圾回收系统来管理Cocos对象。但这里有一个问题，就是将Cocos2d-x对象绑定到javascript对象时由谁负责内存管理。
<!--more-->
先看一个案例。</p>

<h3 id="xxxcreate">通过XXX.create()来分配对象内存</h3>

<p>下面的代码分配了一个全局变量。</p>

<pre><code>gnode=cc.Node.create();
</code></pre>

<p>gnode并没有通过addChild()添加到其它cc.Node中。</p>

<p>在菜单项的回调函数中添加如下代码：</p>

<pre><code>//meuItem callback
onButton:function(sender){
sender.addChild(gnode);
}
</code></pre>

<p>当点击此按钮，你将会看到如下错误信息：</p>

<pre><code>Cocos2d: jsb: ERROR: File /Users/u0u0/Documents/project/SK_parkour/scripting/javascript/bindings/generated/jsb_cocos2dx_auto.cpp: Line: 3010, Function: js_cocos2dx_CCNode_addChild
Cocos2d: Invalid Native Object
</code></pre>

<p>发生了什么！“Invalid Native Object”是什么意思？</p>

<p>在javascript中gnode是一个全局变量，意味着它不能被回收。</p>

<p>但是gnode里的CCNode会被Cocos2d-x回收。</p>

<p>为了弄清楚这个问题，你需要了解一下spidermonkey并深入研究javascript的绑定代码。</p>

<p>cc.Node.create()的内部实现</p>

<p>详细的实现代码如下：</p>

<pre><code>static JSFunctionSpec st_funcs[] = {
JS_FN("create", js_cocos2dx_CCNode_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
JS_FS_END
};

jsb_CCNode_prototype = JS_InitClass(
cx, global,
NULL, // parent proto
jsb_CCNode_class,
js_cocos2dx_CCNode_constructor, 0, // constructor
properties,
funcs,
NULL, // no static properties
st_funcs);
</code></pre>

<p>cc.Node.create()被对应的C函数是js_cocos2dx_CCNode_create()，如下：</p>

<pre><code>JSBool js_cocos2dx_CCNode_create(JSContext *cx, uint32_t argc, jsval *vp)
{
if (argc == 0) {
cocos2d::CCNode* ret = cocos2d::CCNode::create();
jsval jsret;
do {
if (ret) {
js_proxy_t *proxy = js_get_or_create_proxy&lt;cocos2d::CCNode&gt;(cx, ret);
jsret = OBJECT_TO_JSVAL(proxy-&gt;obj);
} else {
jsret = JSVAL_NULL;
}
} while (0);
JS_SET_RVAL(cx, vp, jsret);
return JS_TRUE;
}
JS_ReportError(cx, "wrong number of arguments");
return JS_FALSE;
}
</code></pre>

<p>通过cocos2d:CCNode::create()成功分配的对象将会被封装成js_get_or_create_proxy()创建的一个新对象js_proxy_t。</p>

<p>在js_get_or_create_proxy()函数里，只要关注下面这行代码：</p>

<pre><code>JS_AddObjectRoot(cx, &amp;proxy-&gt;obj);
</code></pre>

<p>这段代码将一个JSObject添加到垃圾回收器的根集合中的spidermonkey api。proxy-&gt;obj是对应javascript里的一个JSObject。</p>

<p>所以通过cc.Node.create()分配的对象将会一直保留在内存中，直到调用JS_RemoveObjectRoot()。</p>

<p>但是cocos2d::CCNode::create()是一个自动释放对象，它会在下一个游戏画面被Cocos2d-x回收。</p>

<p>CCobject的析构函数将会被调用，请注意下面的代码：</p>

<pre><code>// if the object is referenced by Lua engine, remove it
if (m_nLuaID)
{
CCScriptEngineManager::sharedManager()-&gt;getScriptEngine()-&gt;removeScriptObjectByCCObject(this);
}
else
{
CCScriptEngineProtocol* pEngine = CCScriptEngineManager::sharedManager()-&gt;getScriptEngine();
if (pEngine != NULL &amp;&amp; pEngine-&gt;getScriptType() == kScriptTypeJavascript)
{
pEngine-&gt;removeScriptObjectByCCObject(this);
}
}
</code></pre>

<p>pEngine-&gt;removeScriptObjectByCCObject做了一件神奇的事情。</p>

<pre><code>void ScriptingCore::removeScriptObjectByCCObject(CCObject* pObj)
{
js_proxy_t* nproxy;
js_proxy_t* jsproxy;
void *ptr = (void*)pObj;
nproxy = jsb_get_native_proxy(ptr);
if (nproxy) {
JSContext *cx = ScriptingCore::getInstance()-&gt;getGlobalContext();
jsproxy = jsb_get_js_proxy(nproxy-&gt;obj);
JS_RemoveObjectRoot(cx, &amp;jsproxy-&gt;obj);
jsb_remove_proxy(nproxy, jsproxy);
}
}
</code></pre>

<p>JS_RemoveObjectRoot函数将JSobject从javascript根集合中移除。 jsb_remove_proxy将proxy(委托）从hash表中移除。</p>

<p>现在我们可以解释本文开始提出的问题了。</p>

<h3 id="cocos2d-x">Cocos2d-x的垃圾回收系统负责内存管理</h3>

<p>回到gnode,它是一个全局变量。CCObject的析构函数JS_RemoveObjectRoot的作用只是平衡JS_AddObjectRoot的创建。Spidermonkey将不会回收这个全局变量，但是gnode的本地对象将会被释放。访问gnode的本地对象将会产生之前看到的那个错误。</p>

<h3 id="new">通过new分配对象</h3>

<p>思考一下下面的代码:</p>

<pre><code>gnode=new cc.Node;
</code></pre>

<p>为了找到正确答案，同样需要深入研究JSB代码。</p>

<p>如之前提到的，cc.Node的构造函数是js_cocos2dx_CCNode_constructor()。</p>

<p>请注意下面的代码：</p>

<pre><code>if (argc == 0) {
cocos2d::CCNode* cobj = new cocos2d::CCNode();
cocos2d::CCObject *_ccobj = dynamic_cast&lt;cocos2d::CCObject *&gt;(cobj);
if (_ccobj) {
_ccobj-&gt;autorelease();
}
</code></pre>

<p>本地对象被压入到Cocos2d-x的自动释放池中。所以new和create()是一样的。</p>

<h3 id="retainrelease">关于retain()和release()</h3>

<p>有两个函数可以用于手动控制对象的生命周期。如果你想避免之前例子中产生的错误。</p>

<p>你可以有以下两个选择：</p>

<p>1.将gnode添加到其它的CCNode中，addChild()将gnode保留在内部。</p>

<p>2.在create()之后立即调用gnode.retain()。</p>

<p>在第二种情况下，你需要在合适的时候调用gnode.release()以防止内存泄漏。下一节将会介绍它。</p>

<h3 id="ctoronexit">ctor()和onExit()</h3>

<p>Cocos2d-x JSB使用<a href="http://api.viglink.com/api/click?format=go&amp;key=9b4efad421c8b103b2c94b796db973b0&amp;loc=http%3A%2F%2Fwww.cocos2d-x.org%2Fwiki%2FMemory_Management_of_JSB&amp;subId=d654e26afef9085d79aba37dfe97be28&amp;v=1&amp;libId=0b3cce4b-8d39-40a9-a3f9-62d2885b09d0&amp;out=http%3A%2F%2Fejohn.org%2Fblog%2Fsimple-javascript-inheritance%2F&amp;title=Cocos2d-x%20%7C%20Memory%20Management%20of%20JSB&amp;txt=Simple%20JavaScript%20Inheritance%20By%20John%20Resig&amp;jsonp=vglnk_jsonp_138191400851911">Simple JavaScript Inheritance By John Resig</a>。但是构造函数的名字不一样。</p>

<p>在JSB中，ctor是构造函数。对应的onExit则扮演的是析构函数，它会在CCNode释放之前被调用。</p>

<p>下面的例子演示了如何手动控制JSB对象的生命周期。</p>

<pre><code>var container = cc.Node.extend({
ctor:function () {
this._super();
this.gnode = cc.Node.create();
this.gnode.retain();
},
onExit:function() {
this.gnode.release();
this._super();
},
});
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2D-X教程1：制作一个打地鼠游戏（Cocos2D-X Tutorial:Making a Universal App:Part 1）]]></title>
    <link href="http://xiebaochun.github.io/blog/2013/10/16/cocos2d-x-tutorial-making-a-universal-app-part-1/"/>
    <updated>2013-10-16T09:00:00+08:00</updated>
    <id>http://xiebaochun.github.io/blog/2013/10/16/cocos2d-x-tutorial-making-a-universal-app-part-1</id>
    <content type="html"><![CDATA[<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2011/01/WhackAMole1.jpg" alt="" /></p>

<p>击打这个地鼠！</p>

<p>原文地址：<a href="http://www.raywenderlich.com/48180/cocos2d-x-tutorial-making-a-universal-app-part-1">http://www.raywenderlich.com/48180/cocos2d-x-tutorial-making-a-universal-app-part-1</a></p>

<p>本教程介绍的是如何使用Cocos2D-iPhone创建一个打地鼠游戏，但是为什么要费这么大力气创建一个Cocos2D-X版本的呢？我认为有以下几个原因：
<!--more--></p>

<p>1.你可以通过本教程重新熟悉一下如何使用Cocos2D-X框架创建一个完整的游戏。</p>

<p>2.这是一个很好的机会去学习如何制作一个支持多分辨率和纵宽比的游戏。</p>

<p>3.Cocos2D-X是一个非常火的游戏引擎（特别是在中国），它是为多平台游戏而设计的（不像Cocos2D-iPhone或者Android,它是iOS特有的）。所以在本教程介绍Cocos2D-X是很有必要的。</p>

<p>本教程是以其他Cocos2D-X教程为基础的：</p>

<p><a href="http://www.raywenderlich.com/11283/cocos2d-x-for-ios-and-android-getting-started">Cocos2D-X for iOS and Android:Getting Started</a></p>

<p><a href="http://www.raywenderlich.com/33752/cocos2d-x-tutorial-for-ios-and-android-space-game">Cocos2d-X for ios and Android: Space Game</a></p>

<p><a href="http://www.raywenderlich.com/39113/cocos2d-x-tile-map-tutorial-part-1">Cocos2D-X Tile Map Tutoral:Part1</a></p>

<p><a href="http://www.raywenderlich.com/40544/cocos2d-x-tile-map-tutorial-part-2">Cocos2D-X Tile Map Tutoral:Part2</a></p>

<p>如果你还没看过这些Cocos2D-X教程（或者相关知识），我建议你先学习一下。</p>

<p>本系列教程分为两个部分。第一部分，我们将会创建游戏的基本内容-让小地鼠从地洞里弹出来。为了能让游戏在iPhone,iPad,和视网膜分辨率下达到很好的显示的效果，还有高效率，你将会花很多时间去思考如何管理素材和坐标。</p>

<h3 id="section">规划素材配置：概要</h3>

<p>为了能让游戏在iPhone,iPad和Android设备上工作正常，你首先要需要花一些时间来思考如何处理这些素材。</p>

<p>为了理解如何设置素材的合理尺寸，你首先需要学习一下两点知识：</p>

<ul>
  <li>
    <p>视网膜分辨率和Cocos2D-X</p>
  </li>
  <li>
    <p>iPhone,iPad和Android纵横比</p>
  </li>
</ul>

<p>现在开始吧！</p>

<h3 id="cocos2d-x">视网膜分辨率和Cocos2D-X</h3>

<p>好消息，Cocos2D-X的最新版本2.14完美解决了多分辨支持的问题，所以你可以较之前更容易制作了。</p>

<p>1.自从Cocos2D-X的2.04版本默认支持视网膜分辨率，你只要在你的app delegate里重新初始化你的资源就行了。</p>

<p>2.添加高分辨率的sprites到你的app，但是不要使用@2x或者-hd拓展名，你只要将所有高分辨率资源放在名为hd的文件夹中。当加载你的sprites时，根据屏幕的像素，Cocos2D-X将会从这个文件夹里加载hd图片到视网膜分辨。</p>

<p>3.现在在Cocos2D-X里你可以使用点代替像素布局你的sprites（精灵）。</p>

<p>当实际运用时，最简单的做法就是让你的美工制作所需的最高分辨率图片（比如视网膜分辨率的2X尺寸），并且你可以很容易将这些图片缩小到适合iPhone大小的尺寸。</p>

<p>你也许好奇为什么要弄成两个不同尺寸的图片-为什么不只加载大图并且通过代码来调整它的大小？要知道，对app来说将纹理图片加载到内存中是消耗内存的一种做法，所以如果你准备将app运行在不需要高分辨率的图片设备上时，加载设备对应的小图片可以节省很多内存空间。</p>

<p>但是不用担心-你不需要在photoshop上反复地缩小这些图片。TexturePacker提供了一个很棒的功能，它可以轻松地将这些图片进行缩放并提供所有分辨率的图片，并且在本教程中会使用到这个功能。</p>

<h3 id="iphoneipadandroid">iPhone,iPad和Android纵横比</h3>

<p>现在处理视网膜屏幕很简单，但是对于iPad和Android呢？</p>

<p>在本教程，如果你知道怎么样处理iOS设备，你只要把重点放在在iOS设备上，你也可以处理Android设备上的情况。</p>

<p>iPhone的分辨率有480<em>320,960</em>640和1136<em>640，即纵横比是1.5或者1.75。但是iPad的分辨率有768</em>1024和1536*2048，即纵横比为1.33。</p>

<p>这就是说，如果你有一张刚好可以填满iPad屏幕的图片，又想将其用于iPhone设备上，但不能吻合地平铺于iPhone屏幕上。也许你会讲这张图片缩放为适合iPhone宽度的大小（即乘0.9375）：将会得到720*960的尺寸，并且额外多出来的部分不被裁减掉！</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2011/01/Aspect-Ratio-Diff.jpg" alt="" /></p>

<p>这样会变得很麻烦，因为不仅背景图片的有问题，而且由于纵横比的关系让在设备上使用相同的坐标变得很困难。</p>

<p>这里有处理这个问题的几个策略，这是一些开发者经常用到的：</p>

<ul>
  <li>
    <p>如上图所示，在屏幕的中央放置iPhone视网膜屏幕尺寸（640*960）大小的“可玩区域”。这样在“可玩区域”周围会留下额外的空间-你可以用一张背景图片将其覆盖掉并让玩家不容易察觉到。这样你就可以轻松地在设备之间转换坐标了，并且可重复使用素材（高分辨率的资源用于iPad和视网膜屏，普通分辨率资源用于普通的iPhone或者普通的iPad上）。这也是本教程使用的方法。</p>
  </li>
  <li>
    <p>你可以在iPad的两侧各留42像素的空隙，使剩下的区域的从纵横比就和iPhone一样，这样里面的主区域分辨率就是684<em>1024.如果让你内容适应于684</em>1024大小的盒子里，那么你可以将这些图片缩小，并适用于所有的设备。</p>
  </li>
  <li>
    <p>你可以为iPhone,iPad和视网膜屏幕准备不同的图片和不同的坐标系。这样可以保持最大的灵活性，但是会增加资源大小并且在不同的设备上从新布局对象的位置。</p>
  </li>
</ul>

<h3 id="section-1">规划素材：总结</h3>

<p>基于上面的讨论，现在开始规划一下本教程。</p>

<ul>
  <li>
    <p>这些素材被限制在了一个960*640规格的可玩区域，在带有视网膜屏幕的iPhone上使用全屏设置，并置于iPad的屏幕中央。</p>
  </li>
  <li>
    <p>通过TexturePacker将这些素材缩小一半，用于普通iPhone设备。</p>
  </li>
  <li>
    <p>将大尺寸的素材放置于名为hd的文件夹，小尺寸的放于名为sd的文件夹。</p>
  </li>
  <li>
    <p>背景需要特别处理，因为它总是要铺满整个屏幕。背景图片将会做成1024*768的规格（iPad的规格）以至于能铺满整个屏幕。同样的背景图片也会用于iPhone设备应为图片完全可以铺满屏幕。一些背景会溢出屏幕，但但是这并不会对这种特殊背景造成影响。</p>
  </li>
  <li>
    <p>iPad版本的代码将会使用hd文件夹的图片，将坐标转到可玩区域内，并使用合适的纵横比，等。</p>
  </li>
</ul>

<p>请<a href="http://d1xzuxjlafny7l.cloudfront.net/downloads/WhackAMoleArt.zip">下载</a>本教程的素材图片，素材有<a href="http://www.vmwstudios.com/">lovely lady</a>制作。解压文件并看看是如何配置的：</p>

<ul>
  <li>
    <p>在foreground文件夹中，前景图片是1024*768尺寸（iPad的规格）。但是实际上被分为了两部分：下面和上面各一部分，他被分为两部分，这样你可将地鼠置于中间，这样地鼠就好像是从地里出来的那样。</p>
  </li>
  <li>
    <p>在background文件夹中，背景的纵横比是1.33（iPad的纵横比），但是其实际规格是512<em>384。这是因为背景上仅仅显示3个地鼠洞，所以没有必要费这么大力气加载1024</em>1024规格的纹理图片。加载一个小的纹理图片并将其放大。</p>
  </li>
  <li>
    <p>在sprites文件夹，所有的精灵的大小刚刚好适用于960*640规格的可玩区域。注意，这里有一个地鼠还有对应的两个动画（一个微笑表情和一个被打动作）。</p>
  </li>
</ul>

<h3 id="section-2">开始</h3>

<p>打开Xcode,选择FIle\New\Project…并使用iOS\cocos2d-x\cocos2d模板创建一个工程，然后点击Next按钮。将工程名命名为WhackAMole,将Device familiy设置为Universal,并保存工程。</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2013/08/figure1.jpg" alt="" /></p>

<p>使用使用Finder将刚刚下载并解压后的文件添加到WhackAMole工程目录中。它应该和Classes文件夹位于同一级目录中。</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2013/08/figure2.jpg" alt="" /></p>

<p>确保安装了TexturePacker,并在你的机器上能正常运行。如果你没有准备好，或者不知道如何做，请查看<a href="http://www.raywenderlich.com/2361/texture-packer-tutorial-how-to-create-and-optimize-sprite-sheets-in-cocos2d-with-pixel-formats">此教程</a>。</p>

<p>现在你将要使用TexturePacker来创建工程所需的精灵表单。你讲通过TexturePacker的命令行工具和Xcode集成环境来完成此任务，所以不需要使用TexturePacker可视化工具。</p>

<p>现在选择Resources文件夹，按下Command+K,选择OSX\Other\Shell Script。并点击Next.将文件命名为PackerTextures.sh,并点击Create。</p>

<p>然后将下面的代码将PackerTexture,sh的内容覆盖掉：</p>

<pre><code>#!/bin/sh
TP="/usr/local/bin/TexturePacker"
if [ "${ACTION}" = "clean" ]
then
echo "cleaning..."
rm Resources/hd/background*
rm Resources/hd/foreground*
rm Resources/hd/sprites*
rm Resources/sd/background*
rm Resources/sd/foreground*
rm Resources/sd/sprites*
else
echo "building..."

${TP} --smart-update \
--format cocos2d \
--data Resources/hd/background.plist \
--sheet Resources/hd/background.pvr.ccz \
--dither-fs \
--opt RGB565 \
Art/background/*.png
${TP} --smart-update \
--format cocos2d \
--data Resources/sd/background.plist \
--sheet Resources/sd/background.pvr.ccz \
--dither-fs \
--scale 0.5 \
--opt RGB565 \
Art/background/*.png
${TP} --smart-update \
--format cocos2d \
--data Resources/hd/foreground.plist \
--sheet Resources/hd/foreground.pvr.ccz \
--dither-fs-alpha \
--opt RGBA4444 \
Art/foreground/*.png
${TP} --smart-update \
--format cocos2d \
--data Resources/sd/foreground.plist \
--sheet Resources/sd/foreground.pvr.ccz \
--dither-fs-alpha \
--scale 0.5 \
--opt RGBA4444 \
Art/foreground/*.png
${TP} --smart-update \
--format cocos2d \
--data Resources/hd/sprites.plist \
--sheet Resources/hd/sprites.pvr.ccz \
--dither-fs-alpha \
--opt RGBA4444 \
Art/sprites/*.png
${TP} --smart-update \
--format cocos2d \
--data Resources/sd/sprites.plist \
--sheet Resources/sd/sprites.pvr.ccz \
--dither-fs-alpha \
--scale 0.5 \
--opt RGBA4444 \
Art/sprites/*.png
fi
exit 0
</code></pre>

<p>然后将PackTevture移动到文件路径：</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2013/08/figure3.jpg" alt="" /></p>

<p>不要忘了将PackTexture.sh的引用移动到工程中：</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2013/08/figure4.jpg" alt="" /></p>

<p>TexturePacker脚本将为背景图片，前景图片和精灵创建了精灵表单。并为他们准备了高质量和普通质量的图片。</p>

<p>既然每章图片的存放格式都是pvr.ccz,所以跟有效地利用了内存和硬盘空间。</p>
]]></content>
  </entry>
  
</feed>
